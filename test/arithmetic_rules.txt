BASE
literal

FLOW
state
value

PROGRAM
expr = state * value

- constructors
c : literal -> expr
p : expr * expr -> expr
m : expr * expr -> expr
t : expr * expr -> expr
d : expr * expr -> expr

- filters
litToVal : literal -> value
valToLit : value -> literal
plus : literal * literal -> value
minus : literal * literal -> value
times : literal * literal -> value
div : literal * literal -> value

- atoms
mkstate : unit -> state

- rules
Lit(c x_t) = [litToVal(x_t) ?> (x_o)]
Add(p x_t1 x_t2) = [H(x_s, x_t1, x_f1); valToLit(x_f1) ?> (x_t3); H(x_s, x_t2, x_f2); valToLit(x_f2) ?> (x_t4); plus(x_t3, x_t4) ?> (x_o)]
Sub(m x_t1 x_t2) = [H(x_s, x_t1, x_f1); valToLit(x_f1) ?> (x_t3); H(x_s, x_t2, x_f2); valToLit(x_f2) ?> (x_t4); minus(x_t3, x_t4) ?> (x_o)]
Mul(t x_t1 x_t2) = [H(x_s, x_t1, x_f1); valToLit(x_f1) ?> (x_t3); H(x_s, x_t2, x_f2); valToLit(x_f2) ?> (x_t4); times(x_t3, x_t4) ?> (x_o)]
Div(d x_t1 x_t2) = [H(x_s, x_t1, x_f1); valToLit(x_f1) ?> (x_t3); H(x_s, x_t2, x_f2); valToLit(x_f2) ?> (x_t4); div(x_t3, x_t4) ?> (x_o)]